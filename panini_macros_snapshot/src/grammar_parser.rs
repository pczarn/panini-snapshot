use std::mem;

use aster::AstBuilder;

use panini_codegen::rs;
use panini_codegen::front::lexer::Lexer;

use panini_codegen::front::ast::{Stmts, Stmt, Rhs, RhsAst, RhsElement, Action, Sequence};

use util::delimit;

pub struct Parser;

impl Parser {
    pub fn new() -> Self {
        Parser
    }

    pub fn parse_grammar_from_tts(&mut self, cx: &mut rs::ExtCtxt, tts: &[rs::TokenTree]) -> Stmts {
        let sess = cx.parse_sess();
        let mut trdr = rs::lexer::new_tt_reader(&sess.span_diagnostic, None, None, tts.to_vec());

        let mut spans = vec![];
        let mut tokens = vec![];
        let mut token_and_span = rs::transcribe::tt_next_token(&mut trdr);
        while token_and_span.tok != rs::Token::Eof {
            let t = mem::replace(&mut token_and_span, rs::transcribe::tt_next_token(&mut trdr));
            spans.push(t.sp);
            tokens.push(t.tok);
        }
        self.parse_grammar(cx, &tokens[..], &spans[..])
    }

    pub fn parse_grammar(&mut self, cx: &mut rs::ExtCtxt, tokens: &[rs::Token], spans: &[rs::Span]) -> Stmts {
        let mut parser =
// BEGIN GRAMMAR
{
    use ::panini::*;
    #[derive(Clone)]
    #[allow(non_camel_case_types)]
    enum Value0<I> where I: Infer0 {
        Start_133(I::V1),
        G_1995(Vec<I::V11>),
        G_1997(Vec<I::V13>),
        Lexer_114(I::V16),
        InnerAttr_135(I::V11),
        Pound(I::T),
        Not(I::T),
        LBracket(I::T),
        MetaItem_165(I::V5),
        RBracket(I::T),
        Name_137(I::V2),
        LParen(I::T),
        MetaItemList_180(Vec<I::V5>),
        RParen(I::T),
        MetaItemComma_183(I::V5),
        Comma(I::T),
        G_1999(Vec<I::V5>),
        G_2001(Vec<I::V5>),
        Stmt_136(I::V13),
        Ty_239(I::V6),
        DefinedAs_240((I::T, I::T)),
        TopRhs_241(I::V3),
        Semi(I::T),
        ModSep(I::T),
        Eq(I::T),
        Rarrow(I::T),
        Tt_147(I::V12),
        Action_245(I::V4),
        FatArrow(I::T),
        LBrace(I::T),
        Tts_95(Vec<I::V12>),
        RBrace(I::T),
        AnyToken(I::T),
        BraceTt_247(I::V15),
        G_2003(Vec<I::V12>),
        Pattern_158(I::V10),
        Ident_145(I::V8),
        Colon(I::T),
        Underscore(I::T),
        G_2005(Vec<I::V0>),
        Pipe(I::T),
        G_2007(Vec<I::V0>),
        Alt_256(I::V14),
        G_2009(Vec<I::V0>),
        G_2011(Vec<I::V0>),
        PatElem_252(I::V0),
        Elem_155(I::V9),
        RhsElem_261(I::V7),
        Star(I::T),
        Plus(I::T),
        String(I::T),
        Sub(I::T),
        IdentTokWithSpan(I::T),
    }
    struct TerminalAccessor0;
    #[allow(non_snake_case)]
    impl TerminalAccessor0 {
        #[inline]
        fn r_bracket(&self) -> Symbol { Symbol::from(7usize as u32) }
        #[inline]
        fn l_bracket(&self) -> Symbol { Symbol::from(11usize as u32) }
        #[inline]
        fn pound(&self) -> Symbol { Symbol::from(12usize as u32) }
        #[inline]
        fn not(&self) -> Symbol { Symbol::from(13usize as u32) }
        #[inline]
        fn r_paren(&self) -> Symbol { Symbol::from(16usize as u32) }
        #[inline]
        fn l_paren(&self) -> Symbol { Symbol::from(19usize as u32) }
        #[inline]
        fn comma(&self) -> Symbol { Symbol::from(21usize as u32) }
        #[inline]
        fn semi(&self) -> Symbol { Symbol::from(26usize as u32) }
        #[inline]
        fn mod_sep(&self) -> Symbol { Symbol::from(32usize as u32) }
        #[inline]
        fn eq(&self) -> Symbol { Symbol::from(33usize as u32) }
        #[inline]
        fn rarrow(&self) -> Symbol { Symbol::from(34usize as u32) }
        #[inline]
        fn r_brace(&self) -> Symbol { Symbol::from(38usize as u32) }
        #[inline]
        fn fat_arrow(&self) -> Symbol { Symbol::from(41usize as u32) }
        #[inline]
        fn l_brace(&self) -> Symbol { Symbol::from(42usize as u32) }
        #[inline]
        fn any_token(&self) -> Symbol { Symbol::from(43usize as u32) }
        #[inline]
        fn colon(&self) -> Symbol { Symbol::from(51usize as u32) }
        #[inline]
        fn underscore(&self) -> Symbol { Symbol::from(52usize as u32) }
        #[inline]
        fn pipe(&self) -> Symbol { Symbol::from(57usize as u32) }
        #[inline]
        fn star(&self) -> Symbol { Symbol::from(66usize as u32) }
        #[inline]
        fn plus(&self) -> Symbol { Symbol::from(67usize as u32) }
        #[inline]
        fn string(&self) -> Symbol { Symbol::from(68usize as u32) }
        #[inline]
        fn sub(&self) -> Symbol { Symbol::from(72usize as u32) }
        #[inline]
        fn ident_tok_with_span(&self) -> Symbol {
            Symbol::from(73usize as u32)
        }
    }
    macro_rules! G_1995(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont(Vec::new()); } } });
    macro_rules! G_1997(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont(Vec::new()); } } });
    macro_rules! lexer_114(( $ x : expr ) => {
                           { let mut _cont = $ x ; { _cont({ None }); } } });
    macro_rules! G_1999(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont(Vec::new()); } } });
    macro_rules! G_2001(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont(Vec::new()); } } });
    macro_rules! ty_239(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont({ None }); } } });
    macro_rules! action_245(( $ x : expr ) => {
                            { let mut _cont = $ x ; { _cont({ None }); } } });
    macro_rules! G_2003(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont(Vec::new()); } } });
    macro_rules! pattern_158(( $ x : expr ) => {
                             { let mut _cont = $ x ; { _cont({ None }); } }
                             });
    macro_rules! G_2005(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont(Vec::new()); } } });
    macro_rules! G_2007(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont(Vec::new()); } } });
    macro_rules! G_2009(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont(Vec::new()); } } });
    macro_rules! G_2011(( $ x : expr ) => {
                        { let mut _cont = $ x ; { _cont(Vec::new()); } } });
    macro_rules! meta_item_list_180(( $ x : expr ) => {
                                    {
                                    let mut _cont = $ x ;
                                    { G_1999!(|arg0| { _cont(arg0); }); } }
                                    });
    macro_rules! tts_95(( $ x : expr ) => {
                        {
                        let mut _cont = $ x ;
                        { G_2003!(|arg0| { _cont(arg0); }); } } });
    macro_rules! top_rhs_241(( $ x : expr ) => {
                             {
                             let mut _cont = $ x ;
                             {
    G_2005!(|elems| {
action_245!(|block| { _cont({ vec!(( Rhs ( elems ) , Action { expr : block } )) }); });
});
}
                             } });
    macro_rules! alt_256(( $ x : expr ) => {
                         {
                         let mut _cont = $ x ;
                         { G_2009!(|elems| { _cont({ vec!(Rhs ( elems )) }); }); }
                         } });
    macro_rules! start_133(( $ x : expr ) => {
                           {
                           let mut _cont = $ x ;
                           {
    G_1997!(|attrs| {
G_1995!(|stmts| {
lexer_114!(|lexer| { _cont({ Stmts{attrs: attrs, stmts: stmts, lexer: lexer,} }); });
});
});
}
                           } });
    static SERIALIZED_GRAMMAR: &'static [u8] =
        b"\x7fU\x00+\x00\x00\x04\x00\xe0\x0f\x00\x00zU\x00+\x00\x00\x04\x00\x00\x0e\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\xe0\x01\x00\x00h\x15\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x10@\x00+\x00\x00\x04\x00\x00\n\x00\x00`\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x02\x00\x00\x00\x04\x00\x00\x02\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x04\x00\x00\x02\x00\x00\x00\xc0\x02\x00\x00\x00\x04\x00\x00\x02\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x02\x00\x00\x00\x04\x00\x00\x02\x00\x00\x00\xc2\xd6\x00\x00\x00\x04\x00\x002\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2\x12\x00\x00\x00\x04\x00\x00\x02\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc2R\x00\x00\x00\x04\x00\x00\x12\x00\x00\x00\xc2\x92\x00\x00\x00\x04\x00\x00\"\x00\x00\x00@\x00+\x00\x00\x04\x00\x00\x02\x00\x00\x00@\x00*\x00\x00\x04\x00\x00\x02\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00(\x00\x00\x04\x00\x00\x02\x00\x00\x00@\x08\x10\xb0\x02\xf6\xc2\x13\x82\x00\x00\x00@\x00 \x00\x00\x04\x00\x00\x02\x00\x00\x00\x00\x00@\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x08\x08\x00\x08\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x02\x00\x00\x00\x00\x00\x00\x00\x08\x08\x00\x08\xfd\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x84\x00\x00\x00\x00\x00\x00\x00\x08\x08\x00\x08\xfc\x01\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00@\x08\x00\x00\x006\xc0\x13\x82\x00\x00\x00@\x08\x10\xb0\x02\xf6\xc2\x13\x82\x00\x00\x00@\x08\x10\xb0\x02\xf6\xc2\x13\x82\x00\x00\x00@\x08\x00\x00\x00\x16\xc1\x13\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00@\x08\x00\x00\x00\x16\xde\x13\x02\x02\x00\x00@\x08\x00\x00\x00\x16\xc8\x13\x02\x02\x00\x00@\x08\x00\x00\x00\x16\xde\x13\x02\x02\x00\x00@\x08\x00\x00\x00\x16\xe0\x13\x02\x04\x00\x00@\x08\x00\x00\x00\x16\xc0\x13\x02\x00\x00\x00@\x08\x00\x00\x00\x04\x80\x13\x02\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00@\x08\x00\x00\x00\x04\x80\x13\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00`\x15\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00@\x00+\x00\x00\x04\x00\x00\n\x00\x00\x00\xc2\x12\x00\x00\x00\x04\x00\x00\x12\x00\x00\x00\xc2\x12\x00\x00\x00\x04\x00\x00\"\x00\x00\x00\x08\x08\x00\x08\xfc\x00\x00\x00@\x00\x00\x00@\x08\x00\x00\x00\x16\xc0\x13\x82\x00\x00\x00@\x08\x00\x00\x00\x16\xc0\x13\x02\x01\x00\x00@\x08\x00\x00\x00\x16\xc0\x13\x02\x02\x00\x00@\x08\x00\x00\x00\x16\xc0\x13\x02\x04\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00E\x00\x00\x00\x01\x00\x00\x00J\x00\x00\x00\x01\x00\x00\x00K\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x01\x00\x00\x002\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00L\x00\x00\x00\x01\x00\x00\x00M\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x01\x00\x00\x005\x00\x00\x00\x01\x00\x00\x006\x00\x00\x00\x01\x00\x00\x005\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x01\x00\x00\x006\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\"\x00\x00\x00\x01\x00\x00\x00+\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x01\x00\x00\x00.\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00)\x00\x00\x00\x01\x00\x00\x000\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00/\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x01\x00\x00\x00N\x00\x00\x00\x01\x00\x00\x002\x00\x00\x00\x01\x00\x00\x004\x00\x00\x00\x01\x00\x00\x00I\x00\x00\x00\x01\x00\x00\x00O\x00\x00\x00\x01\x00\x00\x007\x00\x00\x00\x01\x00\x00\x007\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x009\x00\x00\x00\x01\x00\x00\x00P\x00\x00\x00\x01\x00\x00\x00;\x00\x00\x00\x01\x00\x00\x00<\x00\x00\x00\x01\x00\x00\x00<\x00\x00\x00\x01\x00\x00\x00Q\x00\x00\x00\x01\x00\x00\x00:\x00\x00\x00\x01\x00\x00\x009\x00\x00\x00\x01\x00\x00\x00R\x00\x00\x00\x01\x00\x00\x001\x00\x00\x00\x01\x00\x00\x00?\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00@\x00\x00\x00\x01\x00\x00\x00A\x00\x00\x00\x01\x00\x00\x00A\x00\x00\x00\x01\x00\x00\x00D\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00?\x00\x00\x00\x01\x00\x00\x00F\x00\x00\x00\x01\x00\x00\x00F\x00\x00\x00\x01\x00\x00\x00G\x00\x00\x00\x01\x00\x00\x00H\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00J\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x01\x00\x00\x00K\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00L\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00M\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00N\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x01\x00\x00\x00O\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x01\x00\x00\x00P\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x01\x00\x00\x00Q\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x01\x00\x00\x00R\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\r\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x003\x00\x00\x00\x01\x00\x00\x003\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x008\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x009\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00=\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x009\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00B\x00\x00\x00\x01\x00\x00\x00C\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00:\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00\x1f\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x01\x00\x00\x00.\x00\x00\x00\x01\x00\x00\x00/\x00\x00\x00\x01\x00\x00\x00/\x00\x00\x00\x01\x00\x00\x000\x00\x00\x00\x01\x00\x00\x001\x00\x00\x00\x01\x00\x00\x001\x00\x00\x00\x01\x00\x00\x002\x00\x00\x00\x01\x00\x00\x005\x00\x00\x00\x01\x00\x00\x006\x00\x00\x00\x01\x00\x00\x006\x00\x00\x00\x01\x00\x00\x007\x00\x00\x00\x01\x00\x00\x007\x00\x00\x00\x01\x00\x00\x008\x00\x00\x00\x01\x00\x00\x00:\x00\x00\x00\x01\x00\x00\x00:\x00\x00\x00\x01\x00\x00\x00:\x00\x00\x00\x01\x00\x00\x00;\x00\x00\x00\x01\x00\x00\x00<\x00\x00\x00\x01\x00\x00\x00<\x00\x00\x00\x01\x00\x00\x00=\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x01\x00\x00\x00?\x00\x00\x00\x01\x00\x00\x00?\x00\x00\x00\x01\x00\x00\x00?\x00\x00\x00\x01\x00\x00\x00?\x00\x00\x00\x01\x00\x00\x00?\x00\x00\x00\x01\x00\x00\x00@\x00\x00\x00\x01\x00\x00\x00@\x00\x00\x00\x01\x00\x00\x00A\x00\x00\x00\x01\x00\x00\x00E\x00\x00\x00\x01\x00\x00\x00E\x00\x00\x00\x01\x00\x00\x00F\x00\x00\x00\x01\x00\x00\x00G\x00\x00\x00\x01\x00\x00\x00J\x00\x00\x00\x01\x00\x00\x00J\x00\x00\x00\x01\x00\x00\x00K\x00\x00\x00\x01\x00\x00\x00K\x00\x00\x00\x01\x00\x00\x00L\x00\x00\x00\x01\x00\x00\x00L\x00\x00\x00\x01\x00\x00\x00M\x00\x00\x00\x01\x00\x00\x00M\x00\x00\x00\x01\x00\x00\x00N\x00\x00\x00\x01\x00\x00\x00N\x00\x00\x00\x01\x00\x00\x00O\x00\x00\x00\x01\x00\x00\x00O\x00\x00\x00\x01\x00\x00\x00P\x00\x00\x00\x01\x00\x00\x00P\x00\x00\x00\x01\x00\x00\x00Q\x00\x00\x00\x01\x00\x00\x00Q\x00\x00\x00\x01\x00\x00\x00R\x00\x00\x00\x01\x00\x00\x00R\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\r\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00)\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00+\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x7f\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x7f\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x01\x7f\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x00\x7f\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00)\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x15\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x0f\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x15\x00\x00\x00\x17\x00\x00\x00\x17\x00\x00\x00\x1b\x00\x00\x00\x1d\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00!\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00%\x00\x00\x00%\x00\x00\x00&\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00*\x00\x00\x00,\x00\x00\x00,\x00\x00\x00-\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x008\x00\x00\x008\x00\x00\x009\x00\x00\x00;\x00\x00\x00=\x00\x00\x00?\x00\x00\x00?\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00E\x00\x00\x00E\x00\x00\x00I\x00\x00\x00K\x00\x00\x00L\x00\x00\x00N\x00\x00\x00N\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00W\x00\x00\x00Y\x00\x00\x00[\x00\x00\x00]\x00\x00\x00_\x00\x00\x00a\x00\x00\x00c\x00\x00\x00e\x00\x00\x00g\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x80\x00\x00\x00\x00\x02\x00\x00\x80\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x80\x01\x00\x00\x00\x05\x00\x00\x80J\x00\x00\x00U\x00\x00\x80\x05\x00\x00\x00\t\x00\x00\x00\x06\x00\x00\x00\n\x00\x00\x00\x12\x00\x00\x00\x15\x00\x00\x80\x14\x00\x00\x00\x16\x00\x00\x00\x08\x00\x00\x00\x0b\x00\x00\x00,\x00\x00\x00/\x00\x00\x00,\x00\x00\x000\x00\x00\x80\n\x00\x00\x00\x0e\x00\x00\x00\t\x00\x00\x00\x0c\x00\x00\x80\x11\x00\x00\x00\x12\x00\x00\x00\x1d\x00\x00\x00\"\x00\x00\x00\x1d\x00\x00\x00#\x00\x00\x80?\x00\x00\x00I\x00\x00\x80\t\x00\x00\x00\r\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x0f\x00\x00\x00\x11\x00\x00\x80-\x00\x00\x001\x00\x00\x00-\x00\x00\x002\x00\x00\x80@\x00\x00\x00N\x00\x00\x00@\x00\x00\x00O\x00\x00\x80L\x00\x00\x00Y\x00\x00\x80M\x00\x00\x00[\x00\x00\x80\x12\x00\x00\x00\x13\x00\x00\x80\x12\x00\x00\x00\x14\x00\x00\x00K\x00\x00\x00W\x00\x00\x80\x18\x00\x00\x00\x19\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x19\x00\x00\x00\x1b\x00\x00\x807\x00\x00\x00=\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1e\x00\x00\x00$\x00\x00\x00\x1f\x00\x00\x00%\x00\x00\x00N\x00\x00\x00]\x00\x00\x80\x1c\x00\x00\x00 \x00\x00\x80$\x00\x00\x00*\x00\x00\x00%\x00\x00\x00+\x00\x00\x00%\x00\x00\x00,\x00\x00\x80\'\x00\x00\x00-\x00\x00\x00/\x00\x00\x004\x00\x00\x00/\x00\x00\x005\x00\x00\x80#\x00\x00\x00&\x00\x00\x80#\x00\x00\x00\'\x00\x00\x00#\x00\x00\x00(\x00\x00\x00#\x00\x00\x00)\x00\x00\x80.\x00\x00\x003\x00\x00\x00(\x00\x00\x00.\x00\x00\x80>\x00\x00\x00G\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x801\x00\x00\x007\x00\x00\x001\x00\x00\x008\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1c\x00\x00\x00\x1f\x00\x00\x80\x1c\x00\x00\x00\x1e\x00\x00\x00\x1c\x00\x00\x00!\x00\x00\x806\x00\x00\x00;\x00\x00\x006\x00\x00\x00<\x00\x00\x807\x00\x00\x00>\x00\x00\x80<\x00\x00\x00E\x00\x00\x80<\x00\x00\x00D\x00\x00\x00:\x00\x00\x00@\x00\x00\x80:\x00\x00\x00A\x00\x00\x00:\x00\x00\x00B\x00\x00\x80O\x00\x00\x00_\x00\x00\x80P\x00\x00\x00a\x00\x00\x80Q\x00\x00\x00c\x00\x00\x80R\x00\x00\x00e\x00\x00\x80>\x00\x00\x00H\x00\x00\x80A\x00\x00\x00P\x00\x00\x80?\x00\x00\x00J\x00\x00\x00?\x00\x00\x00K\x00\x00\x00?\x00\x00\x00L\x00\x00\x00?\x00\x00\x00M\x00\x00\x80\x02\x00\x00\x00\x06\x00\x00\x00E\x00\x00\x00Q\x00\x00\x00E\x00\x00\x00R\x00\x00\x80F\x00\x00\x00S\x00\x00\x00G\x00\x00\x00T\x00\x00\x002\x00\x00\x009\x00\x00\x80\x03\x00\x00\x00\x07\x00\x00\x80J\x00\x00\x00V\x00\x00\x00\x04\x00\x00\x00\x08\x00\x00\x80K\x00\x00\x00X\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x80L\x00\x00\x00Z\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x80M\x00\x00\x00\\\x00\x00\x000\x00\x00\x006\x00\x00\x80N\x00\x00\x00^\x00\x00\x005\x00\x00\x00:\x00\x00\x80O\x00\x00\x00`\x00\x00\x008\x00\x00\x00?\x00\x00\x80P\x00\x00\x00b\x00\x00\x00;\x00\x00\x00C\x00\x00\x80Q\x00\x00\x00d\x00\x00\x00=\x00\x00\x00F\x00\x00\x80R\x00\x00\x00f\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00)\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00+\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00)\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00+\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00#\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x04\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x04\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x16\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\r\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x0f\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x0b\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x12\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x11\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x13\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00$\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x18\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x19\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x1a\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x02\x00\x00\x00\x01\x00\x00\x00\x1f\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\'\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00(\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00)\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00)\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00*\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00+\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00+\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00,\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\x01\x00\x00\x00>\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00";
    static TRACE_INFO: TraceInfo =
        TraceInfo{ids:
                      &[0u32, 1u32, 2u32, 3u32, 4u32, 5u32, 6u32, 7u32, 8u32,
                        9u32, 10u32, 11u32, 12u32, 13u32, 14u32, 15u32, 16u32,
                        17u32, 18u32, 19u32, 20u32, 21u32, 22u32, 23u32,
                        24u32, 25u32, 26u32, 27u32, 28u32, 29u32, 30u32,
                        31u32, 32u32, 33u32, 34u32, 35u32, 36u32, 0u32, 0u32,
                        5u32, 6u32, 18u32, 22u32, 23u32, 24u32, 25u32],
                  map:
                      &[&[0u32, 2u32, 4u32, 5u32],
                        &[0u32, 1u32, 2u32, 3u32, 4u32, 5u32], &[0u32, 1u32],
                        &[0u32, 1u32, 2u32, 3u32, 4u32], &[0u32, 1u32, 2u32],
                        &[0u32, 2u32], &[0u32, 2u32, 3u32],
                        &[0u32, 1u32, 2u32, 3u32, 4u32, 5u32],
                        &[0u32, 1u32, 2u32], &[0u32, 1u32, 2u32], &[0u32],
                        &[0u32, 1u32, 2u32, 3u32, 4u32], &[0u32],
                        &[0u32, 1u32], &[0u32, 1u32, 2u32, 3u32],
                        &[0u32, 1u32, 2u32, 3u32], &[0u32, 1u32],
                        &[0u32, 1u32, 2u32, 3u32], &[0u32, 2u32],
                        &[0u32, 1u32, 2u32], &[0u32, 1u32, 2u32], &[0u32],
                        &[0u32, 2u32, 3u32], &[0u32, 1u32, 2u32, 4u32, 5u32],
                        &[0u32, 2u32], &[0u32, 1u32, 2u32, 4u32],
                        &[0u32, 1u32, 2u32], &[0u32, 1u32],
                        &[0u32, 1u32, 2u32, 3u32], &[0u32, 1u32, 2u32],
                        &[0u32, 1u32, 2u32], &[0u32, 1u32], &[0u32, 1u32],
                        &[0u32, 1u32, 2u32, 3u32, 4u32, 5u32], &[0u32],
                        &[0u32, 1u32], &[0u32, 1u32], &[0u32, 1u32],
                        &[2u32, 3u32], &[0u32, 1u32], &[0u32, 1u32],
                        &[0u32, 1u32], &[0u32, 1u32], &[2u32, 3u32],
                        &[0u32, 1u32], &[2u32, 3u32]],
                  tokens:
                      &[&["start", "inner_attr", "*", "stmt", "*", "lexer"],
                        &["inner_attr", "pound", "not", "l_bracket",
                          "meta_item", "r_bracket"], &["meta_item", "name"],
                        &["meta_item", "name", "l_paren", "meta_item_list",
                          "r_paren"],
                        &["meta_item_comma", "meta_item", "comma"],
                        &["meta_item_list", "meta_item_comma", "*"],
                        &["meta_item_list", "meta_item_comma", "*",
                          "meta_item"],
                        &["stmt", "name", "ty", "defined_as", "top_rhs",
                          "semi"], &["defined_as", "mod_sep", "eq"],
                        &["ty", "rarrow", "tt"], &["ty"],
                        &["action", "fat_arrow", "l_brace", "tts", "r_brace"],
                        &["action"], &["tt", "any_token"],
                        &["tt", "l_bracket", "tts", "r_bracket"],
                        &["tt", "l_paren", "tts", "r_paren"],
                        &["tt", "brace_tt"],
                        &["brace_tt", "l_brace", "tts", "r_brace"],
                        &["tts", "tt", "*"], &["pattern", "ident", "colon"],
                        &["pattern", "underscore", "colon"], &["pattern"],
                        &["top_rhs", "pat_elem", "*", "action"],
                        &["top_rhs", "top_rhs", "pipe", "pat_elem", "*",
                          "action"], &["alt", "pat_elem", "*"],
                        &["alt", "alt", "pipe", "pat_elem", "*"],
                        &["pat_elem", "pattern", "elem"], &["elem", "name"],
                        &["elem", "l_paren", "alt", "r_paren"],
                        &["elem", "rhs_elem", "star"],
                        &["elem", "rhs_elem", "plus"], &["elem", "string"],
                        &["rhs_elem", "elem"],
                        &["lexer", "sub", "name", "l_brace", "tts",
                          "r_brace"], &["lexer"], &["name", "ident"],
                        &["ident", "ident_tok_with_span"]],};
    static SYM_NAMES: &'static [&'static str] =
        &["start", "g1", "lexer", "G", "G", "inner_attr", "g6", "r_bracket",
          "g8", "meta_item", "g10", "l_bracket", "pound", "not", "name",
          "g15", "r_paren", "g17", "meta_item_list", "l_paren",
          "meta_item_comma", "comma", "G", "G", "stmt", "g25", "semi", "g27",
          "top_rhs", "g29", "defined_as", "ty", "mod_sep", "eq", "rarrow",
          "tt", "action", "g37", "r_brace", "g39", "tts", "fat_arrow",
          "l_brace", "any_token", "g44", "g45", "brace_tt", "g47", "G",
          "pattern", "ident", "colon", "underscore", "G", "g54", "g55", "G",
          "pipe", "alt", "G", "g60", "G", "pat_elem", "elem", "g64",
          "rhs_elem", "star", "plus", "string", "g69", "g70", "g71", "sub",
          "ident_tok_with_span", "g74", "g75", "g76", "g77", "g78", "g79",
          "g80", "g81", "g82"];
    struct ParseFactory0 {
        grammar: grammar::InternalGrammar,
    }
    impl ParseFactory0 {
        fn new() -> ParseFactory0 {
            let grammar =
                grammar::InternalGrammar::from_parts(grammar::InternalGrammarParts{storage:
                                                                                       ::std::borrow::Cow::Borrowed(SERIALIZED_GRAMMAR),
                                                                                   num_syms:
                                                                                       83usize,
                                                                                   num_rules:
                                                                                       103usize,
                                                                                   num_external_syms:
                                                                                       0usize,
                                                                                   num_internal_syms:
                                                                                       0usize,
                                                                                   num_nulling_intermediate:
                                                                                       1usize,
                                                                                   start_sym:
                                                                                       Symbol::from(0usize),
                                                                                   trivial_derivation:
                                                                                       true,});
            ParseFactory0{grammar: grammar,}
        }
        fn terminal_accessor(&self) -> TerminalAccessor0 { TerminalAccessor0 }
        fn new_parse<'g, I>(&'g mut self) -> Parse0<'g, I> where
         I: InferTree0<'g> + 'g {
            let bocage = Box::new(Bocage::new(&self.grammar));
            let bocage_ref: &'g Bocage<'g, 'g, 'g, I::Node, Value0<I::Infer>>;
            unsafe { bocage_ref = &*(&*bocage as *const _); }
            let recognizer = Recognizer::new(&self.grammar, bocage_ref);
            let traversal = Traversal::new(bocage_ref, NullOrder::new());
            Parse0{store: Arena::new(),
                   recognizer: recognizer,
                   bocage: bocage,
                   traversal: traversal,
                   finished_node: None,
                   result: [].iter(),}
        }
    }
    trait Infer0 {
        type
        T: Copy;
        type
        V0;
        type
        V1;
        type
        V2;
        type
        V3;
        type
        V4;
        type
        V5;
        type
        V6;
        type
        V7;
        type
        V8;
        type
        V9;
        type
        V10;
        type
        V11;
        type
        V12;
        type
        V13;
        type
        V14;
        type
        V15;
        type
        V16;
    }
    #[derive(Clone, Copy)]
    struct ValueInfer0<T, V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11,
                       V12, V13, V14, V15,
                       V16>(::std::marker::PhantomData<(T, V0, V1, V2, V3, V4,
                                                        V5, V6, V7, V8, V9,
                                                        V10, V11, V12, V13,
                                                        V14, V15, V16)>);
    impl <T, V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14,
          V15, V16> Infer0 for
     ValueInfer0<T, V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12,
                 V13, V14, V15, V16> where T: Copy {
        type
        T
        =
        T;
        type
        V0
        =
        V0;
        type
        V1
        =
        V1;
        type
        V2
        =
        V2;
        type
        V3
        =
        V3;
        type
        V4
        =
        V4;
        type
        V5
        =
        V5;
        type
        V6
        =
        V6;
        type
        V7
        =
        V7;
        type
        V8
        =
        V8;
        type
        V9
        =
        V9;
        type
        V10
        =
        V10;
        type
        V11
        =
        V11;
        type
        V12
        =
        V12;
        type
        V13
        =
        V13;
        type
        V14
        =
        V14;
        type
        V15
        =
        V15;
        type
        V16
        =
        V16;
    }
    trait InferTree0<'g> {
        type
        Node: Copy;
        type
        Infer: Infer0;
    }
    struct InferTreeVal0<Node, I>(::std::marker::PhantomData<(Node, I)>);
    impl <'g, Node, I> InferTree0<'g> for InferTreeVal0<Node, I> where
     I: Infer0 + InferConstraint1<'g, Node> + 'g, Node: Copy + 'g {
        type
        Node
        =
        Node;
        type
        Infer
        =
        I;
    }
    struct Parse0<'g, I> where I: InferTree0<'g> + 'g {
        store: Arena<Value0<I::Infer>>,
        recognizer: Recognizer<'g, 'g,
                    Bocage<'g, 'g, 'g, I::Node, Value0<I::Infer>>>,
        finished_node: Option<NodeRef<'g, 'g, I::Node, Value0<I::Infer>>>,
        #[allow(dead_code)]
        bocage: Box<Bocage<'g, 'g, 'g, I::Node, Value0<I::Infer>>>,
        traversal: TraversalUnordered<'g, I::Node, Value0<I::Infer>>,
        result: ::std::slice::Iter<'g, Value0<I::Infer>>,
    }
    #[allow(dead_code)]
    impl <'g, I> Parse0<'g, I> where I: InferTree0<'g> + 'g {
        fn begin_earleme(&mut self) { }
        fn traced_begin_earleme(&mut self) { self.begin_earleme(); }
        fn scan_tok(&mut self, token: Symbol, value: I::Node) {
            self.recognizer.scan(token, value);
        }
        fn advance(&mut self) -> bool { self.recognizer.advance() }
        fn traced_advance(&mut self) -> bool {
            if self.recognizer.is_exhausted() {
                false
            } else {
                let mut finished_node = None;
                let mut completion_items = vec!();
                {
                    let start_sym = self.recognizer.grammar().start_sym();
                    let mut completions = self.recognizer.completions();
                    while let Some(mut completion) =
                              completions.next_completion() {
                        while let Some(item) = completion.next() {
                            completion_items.push(item);
                            completion.push(item);
                        }
                        let node = completion.complete();
                        if completion.origin() == 0 &&
                               completion.symbol() == start_sym {
                            finished_node = Some(node);
                        }
                    }
                };
                self.finished_node = finished_node;
                self.recognizer.advance_without_completion();
                print_trace(&self.recognizer, &completion_items[..],
                            TRACE_INFO);
                true
            }
        }
        fn end_of_input(&mut self) {
            self.finished_node = Some(self.recognizer.finished_node());
        }
        fn traced_end_of_input(&mut self) { }
        fn fmt_exhaustion(&self, fmt: &mut fmt::Formatter, input_pos: usize)
         -> Result<(), fmt::Error> {
            try!(write ! ( fmt , "Parse error at {}:\nexpected" , input_pos
                 ));
            let mut terminals = self.recognizer.expected_terminals();
            let last = terminals.next();
            for terminal in terminals {
                try!(write ! (
                     fmt , " `{}`," , SYM_NAMES [ terminal . usize (  ) ] ));
            }
            if let Some(last) = last {
                write!(fmt , " or `{}`." , SYM_NAMES [ last . usize (  ) ])
            } else { write!(fmt , "end of input.") }
        }
    }
    impl <'g, I> Iterator for Parse0<'g, I> where I: InferTree0<'g> + 'g {
        type
        Item
        =
        &'g <I::Infer as Infer0>::V1;
        fn next(&mut self) -> Option<Self::Item> {
            match self.result.next() {
                Some(&Value0::Start_133(ref value)) => Some(value),
                _ => None,
            }
        }
    }
struct EnumStream<C> {
    closure: C,
}struct EnumStreamParser<C, D> {
    closure: C,
    eval_closure: D,
    builder: ParseFactory0,
}struct Parse<'g, I> where I: InferTree0<'g> + 'g {
    parse: Box<Parse0<'g, I>>,
}struct ExhaustedParse<'g, I> where I: InferTree0<'g> + 'g {
    parse: Box<Parse0<'g, I>>,
    input_pos: usize,
}impl <C> EnumStream<C> {
    fn new(closure: C) -> Self { EnumStream{closure: closure,} }
    fn with_parse_builder_and_eval_closure<'g, D,
                                           I>(self, builder: ParseFactory0,
                                              eval_closure: D)
     -> EnumStreamParser<C, D> where D: FnMut(&'g mut Parse0<'g, I>),
     I: InferTree0<'g> + 'g {
        EnumStreamParser{closure: self.closure,
                         eval_closure: eval_closure,
                         builder: builder,}
    }
}#[allow(dead_code)]
impl <C, D> EnumStreamParser<C, D> {
    fn parse<'g, I, Iter>(&'g mut self, into_iter: Iter)
     -> Result<Parse<'g, I>, ExhaustedParse<'g, I>> where
     C: Fn(usize, Iter::Item) -> bool, D: FnMut(&'g mut Parse0<'g, I>),
     Iter: IntoIterator<Item = I::Node>, Iter::Item: Copy, I: InferTree0<'g> +
     'g {
        self.common_parse(into_iter, false)
    }
    fn traced_parse<'g, I, Iter>(&'g mut self, into_iter: Iter)
     -> Result<Parse<'g, I>, ExhaustedParse<'g, I>> where
     C: Fn(usize, Iter::Item) -> bool, D: FnMut(&'g mut Parse0<'g, I>),
     Iter: IntoIterator<Item = I::Node>, Iter::Item: Copy, I: InferTree0<'g> +
     'g {
        self.common_parse(into_iter, true)
    }
    #[inline]
    fn common_parse<'g, I, Iter>(&'g mut self, into_iter: Iter, traced: bool)
     -> Result<Parse<'g, I>, ExhaustedParse<'g, I>> where
     C: Fn(usize, Iter::Item) -> bool, D: FnMut(&'g mut Parse0<'g, I>),
     Iter: IntoIterator<Item = I::Node>, Iter::Item: Copy, I: InferTree0<'g> +
     'g {
        let tokens =
            &[self.builder.terminal_accessor().not(),
              self.builder.terminal_accessor().pound(),
              self.builder.terminal_accessor().comma(),
              self.builder.terminal_accessor().underscore(),
              self.builder.terminal_accessor().colon(),
              self.builder.terminal_accessor().mod_sep(),
              self.builder.terminal_accessor().eq(),
              self.builder.terminal_accessor().rarrow(),
              self.builder.terminal_accessor().fat_arrow(),
              self.builder.terminal_accessor().semi(),
              self.builder.terminal_accessor().star(),
              self.builder.terminal_accessor().plus(),
              self.builder.terminal_accessor().pipe(),
              self.builder.terminal_accessor().ident_tok_with_span(),
              self.builder.terminal_accessor().l_brace(),
              self.builder.terminal_accessor().r_brace(),
              self.builder.terminal_accessor().l_bracket(),
              self.builder.terminal_accessor().r_bracket(),
              self.builder.terminal_accessor().l_paren(),
              self.builder.terminal_accessor().r_paren(),
              self.builder.terminal_accessor().string(),
              self.builder.terminal_accessor().sub(),
              self.builder.terminal_accessor().any_token()];
        let mut parse_box = Box::new(self.builder.new_parse());
        let parse: &'g mut Parse0<'g, I>;
        unsafe { parse = &mut *(&mut *parse_box as *mut _); }
        let iter = into_iter.into_iter();
        for (i, elem) in iter.enumerate() {
            if traced {
                parse.traced_begin_earleme();
            } else { parse.begin_earleme(); }
            scan_elem(&mut self.closure, tokens, parse, elem);
            let success =
                if traced { parse.traced_advance() } else { parse.advance() };
            if !success {
                return Err(ExhaustedParse{parse: parse_box, input_pos: i,});
            }
        }
        if traced {
            parse.traced_end_of_input();
        } else { parse.end_of_input(); }
        (self.eval_closure)(parse);
        Ok(Parse{parse: parse_box,})
    }
}fn scan_elem<'g, C,
             I>(closure: &mut C, tokens: &[Symbol], parse: &mut Parse0<'g, I>,
                elem: I::Node) where C: Fn(usize, I::Node) -> bool,
 I: InferTree0<'g> + 'g {
    if closure(0usize, elem) {
        let token = tokens[0usize];
        parse.scan_tok(token, elem);
    }
    if closure(1usize, elem) {
        let token = tokens[1usize];
        parse.scan_tok(token, elem);
    }
    if closure(2usize, elem) {
        let token = tokens[2usize];
        parse.scan_tok(token, elem);
    }
    if closure(3usize, elem) {
        let token = tokens[3usize];
        parse.scan_tok(token, elem);
    }
    if closure(4usize, elem) {
        let token = tokens[4usize];
        parse.scan_tok(token, elem);
    }
    if closure(5usize, elem) {
        let token = tokens[5usize];
        parse.scan_tok(token, elem);
    }
    if closure(6usize, elem) {
        let token = tokens[6usize];
        parse.scan_tok(token, elem);
    }
    if closure(7usize, elem) {
        let token = tokens[7usize];
        parse.scan_tok(token, elem);
    }
    if closure(8usize, elem) {
        let token = tokens[8usize];
        parse.scan_tok(token, elem);
    }
    if closure(9usize, elem) {
        let token = tokens[9usize];
        parse.scan_tok(token, elem);
    }
    if closure(10usize, elem) {
        let token = tokens[10usize];
        parse.scan_tok(token, elem);
    }
    if closure(11usize, elem) {
        let token = tokens[11usize];
        parse.scan_tok(token, elem);
    }
    if closure(12usize, elem) {
        let token = tokens[12usize];
        parse.scan_tok(token, elem);
    }
    if closure(13usize, elem) {
        let token = tokens[13usize];
        parse.scan_tok(token, elem);
    }
    if closure(14usize, elem) {
        let token = tokens[14usize];
        parse.scan_tok(token, elem);
    }
    if closure(15usize, elem) {
        let token = tokens[15usize];
        parse.scan_tok(token, elem);
    }
    if closure(16usize, elem) {
        let token = tokens[16usize];
        parse.scan_tok(token, elem);
    }
    if closure(17usize, elem) {
        let token = tokens[17usize];
        parse.scan_tok(token, elem);
    }
    if closure(18usize, elem) {
        let token = tokens[18usize];
        parse.scan_tok(token, elem);
    }
    if closure(19usize, elem) {
        let token = tokens[19usize];
        parse.scan_tok(token, elem);
    }
    if closure(20usize, elem) {
        let token = tokens[20usize];
        parse.scan_tok(token, elem);
    }
    if closure(21usize, elem) {
        let token = tokens[21usize];
        parse.scan_tok(token, elem);
    }
    if closure(22usize, elem) {
        let token = tokens[22usize];
        parse.scan_tok(token, elem);
    }
}impl <'g, I> Iterator for Parse<'g, I> where I: InferTree0<'g> + 'g {
    type
    Item
    =
    <Parse0<'g, I> as Iterator>::Item;
    fn next(&mut self) -> Option<Self::Item> { self.parse.next() }
}trait InferConstraint1<'g, Node>: Infer0<T = Node> where Node: Copy { }impl <'g, Node, T> InferConstraint1<'g, Node> for T where Node: Copy,
 T: Infer0<T = Node> {
}impl <'g, I> fmt::Debug for ExhaustedParse<'g, I> where I: InferTree0<'g> + 'g
 {
    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {
        self.parse.fmt_exhaustion(fmt, self.input_pos)
    }
}macro_rules! layer_macro1((
                          @ closure $ upper_builder : expr , $ ignored__parse
                          : expr , $ node : expr ; ) => (
                          {
                          let terminal_accessor = TerminalAccessor0 ; let
                          upper_builder = & mut $ upper_builder ; let sym = (
                          $ node ) . terminal ; let value = ( $ node ) . value
                          ; let tokens = & [
                          terminal_accessor . not (  ) , terminal_accessor .
                          pound (  ) , terminal_accessor . comma (  ) ,
                          terminal_accessor . underscore (  ) ,
                          terminal_accessor . colon (  ) , terminal_accessor .
                          mod_sep (  ) , terminal_accessor . eq (  ) ,
                          terminal_accessor . rarrow (  ) , terminal_accessor
                          . fat_arrow (  ) , terminal_accessor . semi (  ) ,
                          terminal_accessor . star (  ) , terminal_accessor .
                          plus (  ) , terminal_accessor . pipe (  ) ,
                          terminal_accessor . ident_tok_with_span (  ) ,
                          terminal_accessor . l_brace (  ) , terminal_accessor
                          . r_brace (  ) , terminal_accessor . l_bracket (  )
                          , terminal_accessor . r_bracket (  ) ,
                          terminal_accessor . l_paren (  ) , terminal_accessor
                          . r_paren (  ) , terminal_accessor . string (  ) ,
                          terminal_accessor . sub (  ) , terminal_accessor .
                          any_token (  ) , ] ; let value = if sym == tokens [
                          0usize ] { Value0 :: Not ( value ) } else if sym ==
                          tokens [ 1usize ] { Value0 :: Pound ( value ) } else
                          if sym == tokens [ 2usize ] {
                          Value0 :: Comma ( value ) } else if sym == tokens [
                          3usize ] { Value0 :: Underscore ( value ) } else if
                          sym == tokens [ 4usize ] { Value0 :: Colon ( value )
                          } else if sym == tokens [ 5usize ] {
                          Value0 :: ModSep ( value ) } else if sym == tokens [
                          6usize ] { Value0 :: Eq ( value ) } else if sym ==
                          tokens [ 7usize ] { Value0 :: Rarrow ( value ) }
                          else if sym == tokens [ 8usize ] {
                          Value0 :: FatArrow ( value ) } else if sym == tokens
                          [ 9usize ] { Value0 :: Semi ( value ) } else if sym
                          == tokens [ 10usize ] { Value0 :: Star ( value ) }
                          else if sym == tokens [ 11usize ] {
                          Value0 :: Plus ( value ) } else if sym == tokens [
                          12usize ] { Value0 :: Pipe ( value ) } else if sym
                          == tokens [ 13usize ] {
                          Value0 :: IdentTokWithSpan ( value ) } else if sym
                          == tokens [ 14usize ] { Value0 :: LBrace ( value ) }
                          else if sym == tokens [ 15usize ] {
                          Value0 :: RBrace ( value ) } else if sym == tokens [
                          16usize ] { Value0 :: LBracket ( value ) } else if
                          sym == tokens [ 17usize ] {
                          Value0 :: RBracket ( value ) } else if sym == tokens
                          [ 18usize ] { Value0 :: LParen ( value ) } else if
                          sym == tokens [ 19usize ] {
                          Value0 :: RParen ( value ) } else if sym == tokens [
                          20usize ] { Value0 :: String ( value ) } else if sym
                          == tokens [ 21usize ] { Value0 :: Sub ( value ) }
                          else if sym == tokens [ 22usize ] {
                          Value0 :: AnyToken ( value ) } else {
                          unreachable ! (  ) } ; upper_builder . reserve ( 1 )
                          ; upper_builder . push ( value ) ; } ) ; (
                          @ builder @ factory [ $ factory : expr ] @ closure [
                          $ closure : expr ] ) => (
                          EnumStream :: new (
                          | id : usize , item | {
                          if id == 0usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::Not, _)) => return true, _ => (), }
                          } if id == 1usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::Pound, _)) => return true, _ => (), }
                          } if id == 2usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::Comma, _)) => return true, _ => (), }
                          } if id == 3usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::Underscore, _)) => return true, _ => (), }
                          } if id == 4usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::Colon, _)) => return true, _ => (), }
                          } if id == 5usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::ModSep, _)) => return true, _ => (), }
                          } if id == 6usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::Eq, _)) => return true, _ => (), }
                          } if id == 7usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::RArrow, _)) => return true, _ => (), }
                          } if id == 8usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::FatArrow, _)) => return true, _ => (), }
                          } if id == 9usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::Semi, _)) => return true, _ => (), }
                          } if id == 10usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::BinOp(rs::BinOpToken::Star), _)) => return true,
    _ => (),
}
                          } if id == 11usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::BinOp(rs::BinOpToken::Plus), _)) => return true,
    _ => (),
}
                          } if id == 12usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::BinOp(rs::BinOpToken::Or), _)) => return true,
    _ => (),
}
                          } if id == 13usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item { Some((&rs::Token::Ident(_), _)) => return true, _ => (), }
                          } if id == 14usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::OpenDelim(rs::DelimToken::Brace), _)) => return true,
    _ => (),
}
                          } if id == 15usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::CloseDelim(rs::DelimToken::Brace), _)) => return true,
    _ => (),
}
                          } if id == 16usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::OpenDelim(rs::DelimToken::Bracket), _)) => return true,
    _ => (),
}
                          } if id == 17usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::CloseDelim(rs::DelimToken::Bracket), _)) => return true,
    _ => (),
}
                          } if id == 18usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::OpenDelim(rs::DelimToken::Paren), _)) => return true,
    _ => (),
}
                          } if id == 19usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::CloseDelim(rs::DelimToken::Paren), _)) => return true,
    _ => (),
}
                          } if id == 20usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::Literal(rs::token::Str_(_), _), _)) => return true,
    _ => (),
}
                          } if id == 21usize {
                          let item = Some ( item ) ; match item { _ => {  } }
                          match item {
    Some((&rs::Token::Ident(ident), _)) if ((ident.name.as_str() == "sub")) =>
    return true,
    _ => (),
}
                          } if id == 22usize {
                          let item = Some ( item ) ; match item {
                          Some ( (&rs::Token::OpenDelim(_), _) ) => return
                          false , Some ( (&rs::Token::CloseDelim(_), _) ) =>
                          return false , _ => {  } }
                          match item { Some(_) => return true, _ => (), } }
                          false } ) . with_parse_builder_and_eval_closure (
                          $ factory , $ closure ) ) ; ( @ get $ parse : expr )
                          => ( $ parse ));
    layer_macro1!(@ builder @ factory [ ParseFactory0 :: new (  ) ] @ closure
                  [
                  | mut parse | {
                  {
                  let _ : & Parse0 < InferTreeVal0 < _ , ValueInfer0 < _ , _ ,
                  _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ , _ ,
                  _ >> > = & * layer_macro1 ! ( @ get parse ) ; } ; let & mut
                  Parse0 {
                  ref mut traversal , ref store , finished_node , ref mut
                  result , .. } = & mut * layer_macro1 ! ( @ get parse ) ; let
                  root = finished_node . unwrap (  ) ; let mut
                  cartesian_product = CartesianProduct :: new (  ) ; traversal
                  . traverse ( root ) ; loop {
                  if let Some ( deps ) = traversal . traverse_deps (  ) {
                  for node in deps {
                  match node {
                  TraversalBottom :: Leaf ( node ) => {
                  let mut builder = SliceBuilder :: new ( & store , 0 ) ;
                  layer_macro1 ! ( @ closure builder , parse , node ; ) ; node
                  . result ( builder . into_slice (  ) ) ; } TraversalBottom
                  :: Null ( nulling ) => {
                  let mut _builder = SliceBuilder :: new ( & store , 0 ) ;
                  match nulling . symbol . usize (  ) {
                  1usize => {
                  _builder . reserve ( 1usize ) ; G_1995 ! (
                  | result | {
                  _builder . push ( Value0 :: G_1995 ( result ) ) ; } ) ; }
                  2usize => {
                  _builder . reserve ( 1usize ) ; G_1997 ! (
                  | result | {
                  _builder . push ( Value0 :: G_1997 ( result ) ) ; } ) ; }
                  3usize => {
                  _builder . reserve ( 1usize ) ; lexer_114 ! (
                  | result | {
                  _builder . push ( Value0 :: Lexer_114 ( result ) ) ; } ) ; }
                  16usize => {
                  _builder . reserve ( 1usize ) ; G_1999 ! (
                  | result | {
                  _builder . push ( Value0 :: G_1999 ( result ) ) ; } ) ; }
                  17usize => {
                  _builder . reserve ( 1usize ) ; G_2001 ! (
                  | result | {
                  _builder . push ( Value0 :: G_2001 ( result ) ) ; } ) ; }
                  19usize => {
                  _builder . reserve ( 1usize ) ; ty_239 ! (
                  | result | {
                  _builder . push ( Value0 :: Ty_239 ( result ) ) ; } ) ; }
                  27usize => {
                  _builder . reserve ( 1usize ) ; action_245 ! (
                  | result | {
                  _builder . push ( Value0 :: Action_245 ( result ) ) ; } ) ;
                  } 34usize => {
                  _builder . reserve ( 1usize ) ; G_2003 ! (
                  | result | {
                  _builder . push ( Value0 :: G_2003 ( result ) ) ; } ) ; }
                  35usize => {
                  _builder . reserve ( 1usize ) ; pattern_158 ! (
                  | result | {
                  _builder . push ( Value0 :: Pattern_158 ( result ) ) ; } ) ;
                  } 39usize => {
                  _builder . reserve ( 1usize ) ; G_2005 ! (
                  | result | {
                  _builder . push ( Value0 :: G_2005 ( result ) ) ; } ) ; }
                  41usize => {
                  _builder . reserve ( 1usize ) ; G_2007 ! (
                  | result | {
                  _builder . push ( Value0 :: G_2007 ( result ) ) ; } ) ; }
                  43usize => {
                  _builder . reserve ( 1usize ) ; G_2009 ! (
                  | result | {
                  _builder . push ( Value0 :: G_2009 ( result ) ) ; } ) ; }
                  44usize => {
                  _builder . reserve ( 1usize ) ; G_2011 ! (
                  | result | {
                  _builder . push ( Value0 :: G_2011 ( result ) ) ; } ) ; }
                  12usize => {
                  _builder . reserve ( 1usize ) ; meta_item_list_180 ! (
                  | result | {
                  _builder . push ( Value0 :: MetaItemList_180 ( result ) ) ;
                  } ) ; } 30usize => {
                  _builder . reserve ( 1usize ) ; tts_95 ! (
                  | result | {
                  _builder . push ( Value0 :: Tts_95 ( result ) ) ; } ) ; }
                  21usize => {
                  _builder . reserve ( 1usize ) ; top_rhs_241 ! (
                  | result | {
                  _builder . push ( Value0 :: TopRhs_241 ( result ) ) ; } ) ;
                  } 42usize => {
                  _builder . reserve ( 1usize ) ; alt_256 ! (
                  | result | {
                  _builder . push ( Value0 :: Alt_256 ( result ) ) ; } ) ; }
                  0usize => {
                  _builder . reserve ( 1usize ) ; start_133 ! (
                  | result | {
                  _builder . push ( Value0 :: Start_133 ( result ) ) ; } ) ; }
                  id => unreachable ! ( "nulling id {}" , id ) } nulling .
                  result ( _builder . into_slice (  ) ) ; } } } } else {
                  break ; } for node in traversal . traverse_sum (  ) {
                  let count = node . iter (  ) . map ( | alt | alt . len (  )
                  ) . fold ( 0 , | acc , elem | acc + elem ) ; let mut
                  slice_builder = SliceBuilder :: new ( & store , count ) ;
                  for alt in node . iter (  ) {
                  cartesian_product . from_production ( & alt ) ; loop {
                  let result = {
                  let args = cartesian_product . as_slice (  ) ; match alt .
                  action (  ) {
                  0u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 1usize ] .
                  clone (  ) , args [ 2usize ] . clone (  ) , ) ; if let (
                  true , Value0 :: G_1995 ( attrs ) , Value0 :: G_1997 ( stmts
                  ) , Value0 :: Lexer_114 ( lexer ) , ) = val {
                  Value0 :: Start_133 (
                  { Stmts{attrs: attrs, stmts: stmts, lexer: lexer,} } ) }
                  else { unreachable ! (  ) } } 1u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 3usize ] .
                  clone (  ) , args [ 4usize ] . clone (  ) , ) ; if let (
                  true , Value0 :: Pound ( leftmost ) , Value0 :: MetaItem_165
                  ( value ) , Value0 :: RBracket ( rightmost ) , ) = val {
                  Value0 :: InnerAttr_135 (
                  {
    let (_, leftmost_span): (&rs::Token, rs::Span) = leftmost;
    let (_, rightmost_span): (&rs::Token, rs::Span) = rightmost;
    let attr =
        rs::Attribute_{id: rs::mk_attr_id(),
                       style: rs::ast::AttrStyle::Inner,
                       value: value,
                       is_sugared_doc: false,};
    let mut ret = rs::spanned(leftmost_span.lo, rightmost_span.hi, attr);
    ret.span.expn_id = leftmost_span.expn_id;
    ret
}
                  ) } else { unreachable ! (  ) } } 2u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Name_137 ( name ) , ) = val {
                  Value0 :: MetaItem_165 (
                  {
    let name: rs::Spanned<rs::Name> = name;
    let word = rs::ast::MetaItemKind::Word(name.node.as_str());
    rs::P(rs::respan(name.span, word))
}
                  ) } else { unreachable ! (  ) } } 3u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 2usize ] .
                  clone (  ) , args [ 3usize ] . clone (  ) , ) ; if let (
                  true , Value0 :: Name_137 ( name ) , Value0 ::
                  MetaItemList_180 ( items ) , Value0 :: RParen ( rightmost )
                  , ) = val {
                  Value0 :: MetaItem_165 (
                  {
    let name: rs::Spanned<rs::Name> = name;
    let (_, rightmost_span): (&rs::Token, rs::Span) = rightmost;
    let list = rs::ast::MetaItemKind::List(name.node.as_str(), items);
    let mut ret = rs::spanned(name.span.lo, rightmost_span.hi, list);
    ret.span.expn_id = name.span.expn_id;
    rs::P(ret)
}
                  ) } else { unreachable ! (  ) } } 4u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: MetaItem_165 ( arg0 ) , ) = val {
                  Value0 :: MetaItemComma_183 ( arg0 ) } else {
                  unreachable ! (  ) } } 5u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: G_1999 ( arg0 ) , ) = val {
                  Value0 :: MetaItemList_180 ( arg0 ) } else {
                  unreachable ! (  ) } } 6u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 1usize ] .
                  clone (  ) , ) ; if let (
                  true , Value0 :: G_2001 ( v ) , Value0 :: MetaItem_165 (
                  elem ) , ) = val {
                  Value0 :: MetaItemList_180 (
                  { let mut v = v; v.push(elem); v } ) } else {
                  unreachable ! (  ) } } 7u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 1usize ] .
                  clone (  ) , args [ 3usize ] . clone (  ) , ) ; if let (
                  true , Value0 :: Name_137 ( lhs ) , Value0 :: Ty_239 ( ty )
                  , Value0 :: TopRhs_241 ( rhs ) , ) = val {
                  Value0 :: Stmt_136 (
                  { Stmt{lhs: lhs, rhs: rhs, ty: ty, span: rs::DUMMY_SP,} } )
                  } else { unreachable ! (  ) } } 8u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 1usize ] .
                  clone (  ) , ) ; if let (
                  true , Value0 :: ModSep ( arg0 ) , Value0 :: Eq ( arg1 ) , )
                  = val { Value0 :: DefinedAs_240 ( (arg0, arg1) ) } else {
                  unreachable ! (  ) } } 9u32 => {
                  let val = ( true , args [ 1usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Tt_147 ( tt ) , ) = val {
                  Value0 :: Ty_239 ( { Some(quote_ty!(cx , $ tt)) } ) } else {
                  unreachable ! (  ) } } 11u32 => {
                  let val = ( true , args [ 2usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Tts_95 ( tts ) , ) = val {
                  Value0 :: Action_245 ( { Some(quote_expr!(cx , { $ tts })) }
                  ) } else { unreachable ! (  ) } } 13u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: AnyToken ( t ) , ) = val {
                  Value0 :: Tt_147 (
                  {
    let (t, _): (&rs::Token, _) = t;
    rs::TokenTree::Token(rs::DUMMY_SP, (*t).clone())
}
                  ) } else { unreachable ! (  ) } } 14u32 => {
                  let val = ( true , args [ 1usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Tts_95 ( tts ) , ) = val {
                  Value0 :: Tt_147 ( { delimit(tts, rs::Bracket) } ) } else {
                  unreachable ! (  ) } } 15u32 => {
                  let val = ( true , args [ 1usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Tts_95 ( tts ) , ) = val {
                  Value0 :: Tt_147 ( { delimit(tts, rs::Paren) } ) } else {
                  unreachable ! (  ) } } 16u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: BraceTt_247 ( arg0 ) , ) = val {
                  Value0 :: Tt_147 ( arg0 ) } else { unreachable ! (  ) } }
                  17u32 => {
                  let val = ( true , args [ 1usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Tts_95 ( tts ) , ) = val {
                  Value0 :: BraceTt_247 ( { delimit(tts, rs::Brace) } ) } else
                  { unreachable ! (  ) } } 18u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: G_2003 ( arg0 ) , ) = val {
                  Value0 :: Tts_95 ( arg0 ) } else { unreachable ! (  ) } }
                  19u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Ident_145 ( ident ) , ) = val {
                  Value0 :: Pattern_158 (
                  {
    let ident: rs::SpannedIdent = ident;
    Some(AstBuilder::new().span(ident.span).pat().id(ident.node))
}
                  ) } else { unreachable ! (  ) } } 20u32 => {
                  let val = ( true , ) ; if let ( true , ) = val {
                  Value0 :: Pattern_158 (
                  { Some(AstBuilder::new().pat().wild()) } ) } else {
                  unreachable ! (  ) } } 22u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 1usize ] .
                  clone (  ) , ) ; if let (
                  true , Value0 :: G_2005 ( elems ) , Value0 :: Action_245 (
                  block ) , ) = val {
                  Value0 :: TopRhs_241 (
                  { vec!(( Rhs ( elems ) , Action { expr : block } )) } ) }
                  else { unreachable ! (  ) } } 23u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 2usize ] .
                  clone (  ) , args [ 3usize ] . clone (  ) , ) ; if let (
                  true , Value0 :: TopRhs_241 ( v ) , Value0 :: G_2007 ( elems
                  ) , Value0 :: Action_245 ( block ) , ) = val {
                  Value0 :: TopRhs_241 (
                  { let mut v = v; v.push((Rhs(elems), Action{expr: block,})); v }
                  ) } else { unreachable ! (  ) } } 24u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: G_2009 ( elems ) , ) = val {
                  Value0 :: Alt_256 ( { vec!(Rhs ( elems )) } ) } else {
                  unreachable ! (  ) } } 25u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 2usize ] .
                  clone (  ) , ) ; if let (
                  true , Value0 :: Alt_256 ( v ) , Value0 :: G_2011 ( elems )
                  , ) = val {
                  Value0 :: Alt_256 ( { let mut v = v; v.push(Rhs(elems)); v }
                  ) } else { unreachable ! (  ) } } 26u32 => {
                  let val = (
                  true , args [ 0usize ] . clone (  ) , args [ 1usize ] .
                  clone (  ) , ) ; if let (
                  true , Value0 :: Pattern_158 ( pat ) , Value0 :: Elem_155 (
                  elem ) , ) = val {
                  Value0 :: PatElem_252 (
                  { RhsElement{bind: pat, elem: elem,} } ) } else {
                  unreachable ! (  ) } } 27u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Name_137 ( sym ) , ) = val {
                  Value0 :: Elem_155 ( { RhsAst::Symbol(sym) } ) } else {
                  unreachable ! (  ) } } 28u32 => {
                  let val = ( true , args [ 1usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Alt_256 ( alt ) , ) = val {
                  Value0 :: Elem_155 ( { RhsAst::Sum(alt) } ) } else {
                  unreachable ! (  ) } } 29u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: RhsElem_261 ( rhs ) , ) = val {
                  Value0 :: Elem_155 (
                  { RhsAst::Sequence(Sequence{rhs: rhs, min: 0, max: None,}) }
                  ) } else { unreachable ! (  ) } } 30u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: RhsElem_261 ( rhs ) , ) = val {
                  Value0 :: Elem_155 (
                  { RhsAst::Sequence(Sequence{rhs: rhs, min: 1, max: None,}) }
                  ) } else { unreachable ! (  ) } } 31u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: String ( s ) , ) = val {
                  Value0 :: Elem_155 (
                  {
    let (t, sp) =
        if let (&rs::token::Literal(rs::token::Str_(t), _), sp) = s {
            (t, sp)
        } else { panic!(); };
    RhsAst::String(rs::respan(sp, t))
}
                  ) } else { unreachable ! (  ) } } 32u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Elem_155 ( elem ) , ) = val {
                  Value0 :: RhsElem_261 (
                  {
    let mut v = Vec::new();
    v.push(RhsElement{bind: None, elem: elem,});
    Rhs(v)
}
                  ) } else { unreachable ! (  ) } } 33u32 => {
                  let val = (
                  true , args [ 1usize ] . clone (  ) , args [ 3usize ] .
                  clone (  ) , ) ; if let (
                  true , Value0 :: Name_137 ( name ) , Value0 :: Tts_95 ( tts
                  ) , ) = val {
                  Value0 :: Lexer_114 ( { Some(Lexer::new(name.node, tts)) } )
                  } else { unreachable ! (  ) } } 35u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: Ident_145 ( i ) , ) = val {
                  Value0 :: Name_137 (
                  { let i: rs::SpannedIdent = i; rs::respan(i.span, i.node.name) }
                  ) } else { unreachable ! (  ) } } 36u32 => {
                  let val = ( true , args [ 0usize ] . clone (  ) , ) ; if let
                  ( true , Value0 :: IdentTokWithSpan ( i ) , ) = val {
                  Value0 :: Ident_145 (
                  {
    match i {
        (&rs::Token::Ident(ident), sp) => rs::respan(sp, ident),
        _ => loop  { },
    }
}
                  ) } else { unreachable ! (  ) } } 37u32 => {
                  let seq_vec = args . iter (  ) . map (
                  | arg | {
                  let val = ( true , ( * arg ) . clone (  ) ) ; if let (
                  true , Value0 :: InnerAttr_135 ( elem ) ) = val { elem }
                  else { unreachable ! (  ) } } ) . collect :: < Vec < _ >> (
                  ) ; Value0 :: G_1995 ( seq_vec ) } 38u32 => {
                  let seq_vec = args . iter (  ) . map (
                  | arg | {
                  let val = ( true , ( * arg ) . clone (  ) ) ; if let (
                  true , Value0 :: Stmt_136 ( elem ) ) = val { elem } else {
                  unreachable ! (  ) } } ) . collect :: < Vec < _ >> (  ) ;
                  Value0 :: G_1997 ( seq_vec ) } 39u32 => {
                  let seq_vec = args . iter (  ) . map (
                  | arg | {
                  let val = ( true , ( * arg ) . clone (  ) ) ; if let (
                  true , Value0 :: MetaItemComma_183 ( elem ) ) = val { elem }
                  else { unreachable ! (  ) } } ) . collect :: < Vec < _ >> (
                  ) ; Value0 :: G_1999 ( seq_vec ) } 40u32 => {
                  let seq_vec = args . iter (  ) . map (
                  | arg | {
                  let val = ( true , ( * arg ) . clone (  ) ) ; if let (
                  true , Value0 :: MetaItemComma_183 ( elem ) ) = val { elem }
                  else { unreachable ! (  ) } } ) . collect :: < Vec < _ >> (
                  ) ; Value0 :: G_2001 ( seq_vec ) } 41u32 => {
                  let seq_vec = args . iter (  ) . map (
                  | arg | {
                  let val = ( true , ( * arg ) . clone (  ) ) ; if let (
                  true , Value0 :: Tt_147 ( elem ) ) = val { elem } else {
                  unreachable ! (  ) } } ) . collect :: < Vec < _ >> (  ) ;
                  Value0 :: G_2003 ( seq_vec ) } 42u32 => {
                  let seq_vec = args . iter (  ) . map (
                  | arg | {
                  let val = ( true , ( * arg ) . clone (  ) ) ; if let (
                  true , Value0 :: PatElem_252 ( elem ) ) = val { elem } else
                  { unreachable ! (  ) } } ) . collect :: < Vec < _ >> (  ) ;
                  Value0 :: G_2005 ( seq_vec ) } 43u32 => {
                  let seq_vec = args . iter (  ) . map (
                  | arg | {
                  let val = ( true , ( * arg ) . clone (  ) ) ; if let (
                  true , Value0 :: PatElem_252 ( elem ) ) = val { elem } else
                  { unreachable ! (  ) } } ) . collect :: < Vec < _ >> (  ) ;
                  Value0 :: G_2007 ( seq_vec ) } 44u32 => {
                  let seq_vec = args . iter (  ) . map (
                  | arg | {
                  let val = ( true , ( * arg ) . clone (  ) ) ; if let (
                  true , Value0 :: PatElem_252 ( elem ) ) = val { elem } else
                  { unreachable ! (  ) } } ) . collect :: < Vec < _ >> (  ) ;
                  Value0 :: G_2009 ( seq_vec ) } 45u32 => {
                  let seq_vec = args . iter (  ) . map (
                  | arg | {
                  let val = ( true , ( * arg ) . clone (  ) ) ; if let (
                  true , Value0 :: PatElem_252 ( elem ) ) = val { elem } else
                  { unreachable ! (  ) } } ) . collect :: < Vec < _ >> (  ) ;
                  Value0 :: G_2011 ( seq_vec ) } _ => unreachable ! (
                  "rule id {}" , alt . action (  ) ) } } ; slice_builder .
                  push ( result ) ; if cartesian_product . next (  ) . is_none
                  (  ) { break ; } } } node . result (
                  slice_builder . advance_slice (  ) ) ; } } * result = match
                  root . get (  ) {
                  Evaluated { values } => values . iter (  ) , _ =>
                  unreachable ! (  ) } ; } ])
}
// END GRAMMAR
;

        let mut result = parser.parse(tokens.iter().zip(spans.iter().cloned())).unwrap();
        let stmts = result.next().unwrap().clone();
        assert!(result.next().is_none());
        stmts
    }
}
